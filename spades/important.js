function $gamify(e){return{arr:e,each:function(e){for(var t=0;t<this.arr.length;t++){e.call(this.arr,this.arr[t])}},any:function(e){for(var t=0;t<this.arr.length;t++){if(e.call(this.arr,this.arr[t])){return true}}return false},max:function(e){var t=null;for(var n=0;n<this.arr.length;n++){var r=e.call(this.arr,this.arr[n]);if(t===null){t=r}else if(r>=t){t=r}}return t},random:function(){return this.arr[Math.floor(Math.random()*this.arr.length)]},where:function(e){var t=[];for(var n=0;n<this.arr.length;n++){var r=this.arr[n];if(e(r)){t.push(r)}}return t},count:function(e){var t=0;for(var n=0;n<this.arr.length;n++){if(e.call(this.arr,this.arr[n])){t++}}return t},all:function(e){for(var t=0;t<this.arr.length;t++){if(!e.call(this.arr,this.arr[t])){return false}}return true},remove:function(e){for(var t=0;t<this.arr.length;t++){if(this.arr[t]==e){this.arr.splice(t,1);return true}}return false},last:function(){if(!this.arr.length){return null}return this.arr[this.arr.length-1]},indexOf:function(e){for(var t=0;t<this.arr.length;t++){if(this.arr[t]==e){return t}}return-1},contains:function(e){return this.indexOf(e)!=-1}}}function handleError(e){throw e}function log(e){if(typeof WScript=="object"){WScript.Echo(e)}}function trace(e){log(e)}function Card(e,t){this.init(e,t)}function CardGame(){this.initDefaults()}function Spades(){CardGame.prototype.create(this);this.init()}function createGame(){return new Spades}function ComputerPlayer(e){this.init(e)}function HumanPlayer(e){this.init(e)}function showCards(e,t,n){setTimeout(function(){for(var n=0;n<e.length;n++){e[n].showCard(t)}},n||ANIMATION_SPEED/2)}function hideCards(e,t,n){setTimeout(function(){for(var n=0;n<e.length;n++){e[n].hideCard(t)}},n||ANIMATION_SPEED/2)}function showPage(e){$(".inner-page").hide();$(e+"-page").show();trackEvent("Page",e.substr(1,1).toUpperCase()+e.substr(2))}function WebCardGame(){}function loadSocialScripts(){var e,t=document.getElementsByTagName("script")[0];e=document.createElement("script");e.async=true;$.getScript("https://apis.google.com/js/plusone.js");$.getScript("http://platform.twitter.com/widgets.js")}function WebSpades(){}var errorHandling=true;trace.enabled=false;Card.prototype={playable:false,init:function(e,t){this.shortName=e+t;this.suit=e;this.rank=t;if(e=="bj"){this.longName="black joker";this.shortName="BJ";return}else if(e=="rj"){this.longName="red joker";this.shortName="RJ";return}var n={h:"hearts",s:"spades",d:"diamonds",c:"clubs"};var r={11:"jack",12:"queen",13:"king",1:"ace",14:"ace"};if(r[t]){this.longName=r[t]+" of "+n[e]}else{this.longName=t+" of "+n[e]}this.shortName=this.suit.toUpperCase()+this.rank},toString:function(){return this.shortName},rankName:function(){var e=[null,null,"a two","a three","a four","a five","a six","a seven","an eight","a nine","a ten","a jack","a queen","a king","an ace"];return e[this.rank]},shortRankName:function(){var e=[null,null,"two","three","four","five","six","seven","eight","nine","ten","jack","queen","king","ace"];return e[this.rank]},suitName:function(){var e={h:"heart",s:"spade",d:"diamond",c:"club"};return e[this.suit]}};CardGame.prototype={cardCount:8,enableRendering:true,defaultPlayerCount:2,useBlackJoker:false,useRedJoker:false,acesHigh:true,makeRenderFunc:function(format){return function(e){with(e){var msg=eval(format.replace(/@(\w+(\.\w+)*)/g,"'+$1+'").replace(/(.*)/,"'$1'"));log(msg)}e.game.callbackQueue.push(e)}},initDefaults:function(){this.callbackQueue=[];this.renderers={};this.renderers["deckready"]=this.makeRenderFunc("deckready");this.renderers["dealcard"]=this.makeRenderFunc("dealcard - @card - @player.name - hand: @player.hand");this.renderers["selectcard"]=this.makeRenderFunc("selectcard - @card - @player.name");this.renderers["unselectcard"]=this.makeRenderFunc("unselectcard - @card - @player.name");this.renderers["start"]=this.makeRenderFunc("start");this.renderers["playerturn"]=this.makeRenderFunc("playerturn - @player.name");this.renderers["play"]=this.makeRenderFunc("play - @player.name played @cards - hand: @player.hand");this.renderers["draw"]=this.makeRenderFunc("draw - @card - @player.name");this.renderers["pass"]=this.makeRenderFunc("pass - @player.name");this.renderers["win"]=this.makeRenderFunc("win - @player.name");this.renderers["sorthand"]=this.makeRenderFunc("sorthand - @player.name - @player.hand");this.renderers["pickdealer"]=this.makeRenderFunc("pickdealer - @player.name");this.players=[]},runInConsole:function(){this.start();
for(var t=0;t<this.defaultPlayerCount;t++){this.addPlayer(new ComputerPlayer(e[t]))}this.deal();while(this.callbackQueue.length>0){var n=this.callbackQueue.splice(0,1)[0];n.callback()}},message:function(e){},renderEvent:function(e,t,n){if(!n){n={}}if(!n.player){n.player=this.currentPlayer()}n.name=e;n.game=this;var r=this;n.callback=function(){if(errorHandling){try{t.call(r)}catch(e){handleError(e)}}else{t.call(r)}};if(this.enableRendering){if(errorHandling){try{this.renderers[e](n)}catch(i){handleError(i)}}else{this.renderers[e](n)}}else{n.callback()}},setEventRenderer:function(e,t){this.renderers[e]=t},getPlayableCards:function(e){var t=[];$gamify(e.hand).each(function(e){if(e.playable){t.push(e)}});return t},players:null,deck:null,pile:null,currentPlayerIndex:0,playCards:function(e,t){for(var n=0;n<t.length;n++){var r=t[n];if(!this.canPlayCard(e,r)){throw"Illegal card from "+e.name+", "+r}this.pile.push(r);r.selected=false;if(!e.remove(r)){throw"Card "+r+" is not held by player "+e.name}}e.selectedCards=[];e.canPlay=false;this.renderEvent("play",this.afterPlayCards,{cards:t})},afterPlayCards:function(){this.nextPlayerTurn()},selectCard:function(e,t,n){if(!e.hasCard(t)){throw"Player can't select a card he doesn't hold!"}if(t.selected){throw"Card is already selected!"}if(e.selectedCards===this.undefined){e.selectedCards=[]}t.selected=true;e.selectedCards.push(t);this.renderEvent("selectcard",n||function(){},{card:t,player:e})},unselectCard:function(e,t){if(!e.hasCard(t)){throw"Player can't unselect a card he doesn't hold!"}if(!t.selected){throw"Card is not selected!"}t.selected=false;$gamify(e.selectedCards).remove(t);this.renderEvent("unselectcard",function(){},{card:t,player:e})},sortHand:function(e,t,n){if(!e.hand){return}var r=function(t,n){if(e.handSorted=="ASC"){return n-t}return t-n};if(this.sortType=="suit"){e.hand.sort(function(e,t){var n={h:0,s:1,d:2,c:3};if(e.suit==t.suit){return r(e.rank,t.rank)}return r(n[e.suit],n[t.suit])})}else if(this.sortType=="rank"){e.hand.sort(function(e,t){var n={h:0,s:1,d:2,c:3};if(e.rank==t.rank){return r(n[e.suit],n[t.suit])}return r(e.rank,t.rank)})}e.handSorted=e.handSorted=="ASC"?"DESC":"ASC";if(!n){this.renderEvent("sorthand",t||function(){})}},drawCard:function(e){e.hand.push(this.deck.pop());e.handSorted=false;e.canPlay=false;this.renderEvent("draw",this.playerPlay,{card:$gamify(e.hand).last(),cardpos:e.hand.length-1})},currentPlayerTurn:function(){this.beforePlayerTurn(this.currentPlayer());this.renderEvent("playerturn",this.playerPlay)},playerDraw:function(e){e.draw()},playerPlay:function(){var e=this.currentPlayer();var t=[];for(var n=0;n<e.hand.length;n++){var r=e.hand[n];r.playable=this.canPlayCard(e,r);if(r.playable){t.push(r)}}e.canPlay=true;e.hasPlayableCards=t.length>0;if(t.length==0){if(this.mustSayPass(e)){this.renderEvent("pass",this.nextPlayerTurn)}else if(this.mustDraw(e)){this.playerDraw(e)}else{throw"Game must implement mustSayPass or mustDraw correctly"}}else{this.currentPlayer().play(t)}},nextPlayerTurn:function(){var e=this.currentPlayer();if(this.hasWon(e)){this.message(e.name+" wins!");this.renderEvent("win",function(){})}else{this.currentPlayerIndex=this.pickNextPlayerIndex();if(this.isNewRoundStarting()){this.round++}this.currentPlayerTurn()}},addPlayer:function(e){e.game=this;e.pos=this.players.length;this.players.push(e)},getNextPlayer:function(e){var t=$gamify(this.players).indexOf(e);return this.players[this.nextIndex(t)]},start:function(){this.pile=[];this.round=0;this.newDeck()},afterDealing:function(){this.currentPlayerIndex=this.pickFirstPlayerIndex();this.renderEvent("start",this.currentPlayerTurn)},currentPlayer:function(){return this.players[this.currentPlayerIndex]},newDeck:function(){this.deck=[];var e=this.acesHigh?2:1;var t=e+12;for(var n=e;n<=t;n++){this.deck.push(new Card("h",n));this.deck.push(new Card("s",n));this.deck.push(new Card("d",n));this.deck.push(new Card("c",n))}if(this.useBlackJoker){this.deck.push(new Card("bj",0))}if(this.useRedJoker){this.deck.push(new Card("rj",0))}this.shuffle(this.deck);this.renderEvent("deckready",function(){})},shuffle:function(e){var t=e.length;if(t==0)return;while(--t){var n=Math.floor(Math.random()*(t+1));var r=e[t];var i=e[n];e[t]=i;e[n]=r}},dealtCardCount:0,nextPlayerToDealTo:0,dealerIndex:-1,lastDealerIndex:-1,deal:function(){if(this.dealerIndex==-1){this.dealerIndex=this.pickDealerIndex();this.nextPlayerToDealTo=this.nextIndex(this.dealerIndex);this.renderEvent("pickdealer",this.deal,{player:this.players[this.dealerIndex]});return}if(this.dealtCardCount==this.cardCount*this.players.length){this.afterDealing()}else{var e=this.deck.pop();var t=this.players[this.nextPlayerToDealTo];t.hand.push(e);this.nextPlayerToDealTo=this.nextIndex(this.nextPlayerToDealTo);this.dealtCardCount++;this.renderEvent("dealcard",this.deal,{player:t,cardpos:t.hand.length-1,card:e})}},create:function(e){for(var t in this){if(!e[t]){e[t]=this[t]}}e.base=this},pickDealerIndex:function(){if(this.lastDealerIndex>=0){return this.nextIndex(this.lastDealerIndex)}else{return Math.floor(Math.random()*this.players.length)}},pickFirstPlayerIndex:function(){return this.nextIndex(this.dealerIndex)},hasWon:function(e){return false},beforePlayerTurn:function(e){},canPlayCard:function(e,t){return true},canSelectCard:function(e,t){return true},mustSayPass:function(e){return false},mustDraw:function(e){return false},nextIndex:function(e){return(e+1)%this.players.length},pickNextPlayerIndex:function(){return this.nextIndex(this.currentPlayerIndex)},isNewRoundStarting:function(){return this.currentPlayerIndex==0}};